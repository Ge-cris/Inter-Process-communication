#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>
#include <pthread.h>

	int pipefd[2]; // file discriptors for the pipe
	pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER; //mutex for synchronisation
	void *child_thread_initializer(void *arg){
		char buff[100]; //buffer to read form the pipe
		
		//Read data from the pipe
		pthread_mutex_lock(&mutex);
		ssize_t bytes_read = read(pipefd[0], buff, sizeof(buff));
		pthread_mutex_unlock(&mutex);
		if (bytes_read == -1){
			perror("read");
			exit(EXIT_FAILURE);
		}
		printf("Child process received %s", buff);
		
		//Write data to the pipe
		const char *message_to_parent = "Hello from the child process!\n";
		pthread_mutex_lock(&mutex); //Lock the mutex
		ssize_t bytes_written = write(pipefd[1], message_to_parent, strlen(message_to_parent));
		pthread_mutex_unlock(&mutex); //Unlock the mutex
		if (bytes_written == -1){
			perror("write");
			exit(EXIT_FAILURE);
		}
		pthread_exit(NULL);
	}
int main(void) {
	pthread_t tid;
	char buff[100]; //buffer to read from the pipe

	//create the pipes
	if (pipe(pipefd) == -1){
		perror("pipe");
		exit(EXIT_FAILURE);
	}
	
	//Create a child thread
	if (pthread_create(&tid, NULL, child_thread_initializer, NULL) != 0){
		perror("pthread_create");
		exit(EXIT_FAILURE);
	}
	
	//Write data to the pipe
	const char *message_to_child = "Hello from the parent!\n";
	pthread_mutex_lock (&mutex); //Lock the mutex
	ssize_t bytes_written = write (pipefd[1], message_to_child, strlen(message_to_child));
	pthread_mutex_unlock(&mutex); //Unlock the mutex
	if (bytes_written == -1){
		perror("write");
		exit(EXIT_FAILURE);
	}
	
	//read data from the pipe
	pthread_mutex_lock(&mutex);
	ssize_t bytes_read = read (pipefd[0], buff, sizeof(buff));
	pthread_mutex_unlock(&mutex);
	if (bytes_read == -1){
		perror("read");
		exit(EXIT_FAILURE);
	}
	printf("Parent process received %s", buff);
	
	//Wait for the child thread to finish
	if (pthread_join(tid, NULL) != 0){
		perror("pthread_join");
		exit(EXIT_FAILURE);
	}
	
	//close the pipe
	close(pipefd[0]);
	close(pipefd[1]);
	
	return 0;
}

