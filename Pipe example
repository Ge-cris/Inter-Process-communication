#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>

int main(void) {
	int pipefd[2]; // file discriptors for the pipe
	pid_t pid;
	char buff[100]; //buffer to read from the pipe
	
	//create the pipe
	if (pipe(pipefd) == -1){
		perror("pipe");
		exit(EXIT_FAILURE);
	}
	
	//fork a child process
	pid = fork();
	if (pid == -1){
		perror("fork");
		exit(EXIT_FAILURE);
	}
	if (pid == 0) { //child process
		close(pipefd[1]); // close the right end of the pipe
		//read data from the pipe
		ssize_t bytes_read = read(pipefd[0], buff, sizeof(buff));
		if (bytes_read == -1){
			perror("read");
			exit(EXIT_FAILURE);
		}
		printf("Child process received: %s ", buff);
		close(pipefd[0]); //close the read end of the pipe
		exit(EXIT_SUCCESS);
	} else{ //parent process
		close(pipefd[0]); //close the read end of the pipe
		//write data to the pipe
		const char *message = "Hello from the parent process!\n";
		ssize_t bytes_written = write(pipefd[1], message, strlen(message));
		if (bytes_written == -1){
			perror("write");
			exit(EXIT_FAILURE);
		}
		close(pipefd[1]); //close the write end of the pipe
		wait(NULL); //wait for the child process to finish
		exit(EXIT_SUCCESS);
	}
	
	return 0;
}
